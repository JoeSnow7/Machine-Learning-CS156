{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Assignment 2\n",
    "### CS156\n",
    "### Jose Nieves Flores Maynez\n",
    "### Lending Club Machine Learning Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Variables included in model\n",
    "The variables were chosen mainly from the Reject dataset. This is because it would be no use to choose first from the Approved ones since they have a lot more variables included that aren't in the Reject. \n",
    "<br>\n",
    "I've decided to keep the debt-to-income ratio, their employment length, and the state they are from.\n",
    "<br>\n",
    "<br>\n",
    "Risk Score is removed as it isn't present in the accepted data. The loan title was also removed, as it presented many unique values that shouldn't be standing by themselves. Furthermore, they weren't very specific either and cleaning those terms wouldn't prove very effective either.\n",
    "<br>\n",
    "<br>\n",
    "Zip Code was removed because since the data was anonymized, there are 100 different options for all the zip codes we have recorded. There is no correlation that we know of between zip codes with the same 3 first digits as they could be very different locations. Furthermore, there exist some zip codes that are repeated in different states so even if we had the full zip code, we would need to combine it with the state to make sure it's the actual same zone. \n",
    "<br>\n",
    "<br>\n",
    "Policy was removed as I noticed that only the approved loans could possibly have a value of \"1\" and all the rejected ones had the same value of 0. This is because Policy is used to record if an individual is eligible for a special treatment in their loan terms to facilitate their approval and it would be a tell for approved loans.\n",
    "<br>\n",
    "<br>\n",
    "Since a person can't possibly choose when to apply for a loan out of those days in the past, the application date is also ommited.\n",
    "<br>\n",
    "<br>\n",
    "We are left with the variables earlier stated as chosen as they are already too few left and we should have some specific information on the applicant to be able to predict their elegibility."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Cleaning Data and preparation\n",
    "The variables mentioned above are the ones that were kept. They were cleaned by converting all of the debt-to-income ratios into float numbers by eliminating their \"%\" sign when they were strings.\n",
    "<br>\n",
    "<br>\n",
    "I also removed all of the rows with missing datapoints as there was no way to predict them from the rest of the variables. Not even states could be predicted from Zip Codes for the same reason stated for the elimination of Zip Codes.\n",
    "<br>\n",
    "<br>\n",
    "Furthermore, I changed the values of the employment length to make them ordered so that a higher length of employment would be rewarded more above a lower value since it is ordinal.\n",
    "<br>\n",
    "<br>\n",
    "There were some initial issues that made the data be a single column in the beginning so it was transformed from a series into a dataframe with a snippet of code found on stack overflow. The link can be found in the reference section. This was made so that the data could actually be worked with. It came along with replacing the names of each of the columns and matching them in both the approved and rejected datasets.\n",
    "<br>\n",
    "<br>\n",
    "Before concatenating the datasets, an indicator variable was assigned to each dataset individually to identify if the loan had been approved or rejected using a value of 1 for approved. This column was removed later on when we had have a results vector and a dataframe with the variables to predict. They were also split and prepared by using the train_test_split function from sklearn.model_selection."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Type of model\n",
    "The chosen model was a logistic regression. This was most suitable because we were predicting on a binary variable. All we did was predict whether a loan would be accepted or rejected. \n",
    "<br>\n",
    "To predict what the maximum loan an individual could take out, we have the person \"apply\" for loans increasing the size of the loan in small increments of $5$ dollars until it is rejected. Once it is rejected, we take the value of the last accepted loan and that is determined to be the best deal they could get. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Training Method\n",
    "The amount of rejected data is much more than the available as approved. Therefore, I had to balance the weights of the classes. By doing so, the weight of each class is inversely proportional to its frequency.\n",
    "<br>\n",
    "It also uses the liblinear algorithm as it is a simple logistic regression with only 2 classes (approved and rejected).\n",
    "<br>\n",
    "The solver chosen is \"ovr\" as it is the only option for the liblinear algorithm. \n",
    "<br>\n",
    "We take \"l2\" as the penalty because we don't want to reduce the values of some variables to 0. Since we have several dummy variables that were created for each of the states, it would be very unfortunate if those coefficients were reduced to $0$ which the \"l1\" penalty system tends to do. This would be unfortunate because it would bias the results to conclude that several states can't influence the outcome of a loan application and we would prefer the model to tell us that by itself with no bias."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Estimate of Performance\n",
    "This model is not quite good, although it is still better than flipping a coin. It approved of 70% of the loans that should've been approved. However, it also approved many loans that should've been rejected, having a recall of 20%. Its recall for rejections is of 98%. Although this number is pretty good, it is partly influenced by the fact that many of the data with which we tested should've been rejected on the first place. Its precision for rejection slightly better than for approving, achieving an 83% in precision. Overall, it has an accuracy of 82% but it seems to be slightly pessimistic on approved loans given its recall value for approvals. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "collapsed": true,
    "id": "k0uo0DHNb7Ew"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "%matplotlib inline\n",
    "#from sklearn.cross_validation import train_test_split\n",
    "#from sklearn.LinearRegression import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1986
    },
    "colab_type": "code",
    "collapsed": false,
    "id": "xgKzhBYTIvlf",
    "outputId": "63433d4d-1d67-4fa7-c2b0-a961fa3abd18"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "747340\n",
      "['0']\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Amount Requested</th>\n",
       "      <th>Debt-To-Income Ratio</th>\n",
       "      <th>State</th>\n",
       "      <th>Employment Length</th>\n",
       "      <th>Approved</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000.00</td>\n",
       "      <td>10%</td>\n",
       "      <td>NM</td>\n",
       "      <td>4 years</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000.00</td>\n",
       "      <td>10%</td>\n",
       "      <td>MA</td>\n",
       "      <td>&lt; 1 year</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11000.00</td>\n",
       "      <td>10%</td>\n",
       "      <td>MD</td>\n",
       "      <td>1 year</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6000.00</td>\n",
       "      <td>38.64%</td>\n",
       "      <td>MA</td>\n",
       "      <td>&lt; 1 year</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1500.00</td>\n",
       "      <td>9.43%</td>\n",
       "      <td>MD</td>\n",
       "      <td>&lt; 1 year</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "0 Amount Requested Debt-To-Income Ratio State Employment Length  Approved\n",
       "1          1000.00                  10%    NM           4 years         0\n",
       "2          1000.00                  10%    MA          < 1 year         0\n",
       "3         11000.00                  10%    MD            1 year         0\n",
       "4          6000.00               38.64%    MA          < 1 year         0\n",
       "5          1500.00                9.43%    MD          < 1 year         0"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Import the dataset for rejected loans\n",
    "rejected = pd.read_csv(\"RejectStatsA.csv\", low_memory = False)\n",
    "\n",
    "# This is because we used to have a series but we need \n",
    "# a dataframe with several columns.\n",
    "rejected = rejected[rejected.columns[0]]\n",
    "rejected = rejected.to_frame().reset_index()\n",
    "\n",
    "# From here we assign the proper names of each column\n",
    "rejected.columns = rejected.iloc[0] #set the header row as the df header\n",
    "rejected = rejected[1:] #take the data less the header row\n",
    "\n",
    "# keep only variables we care about\n",
    "rej = rejected[[\"Amount Requested\", \"Debt-To-Income Ratio\", \n",
    "                \"State\", \"Employment Length\"]]\n",
    "\n",
    "# Drop na values\n",
    "rej = rej.dropna()\n",
    "\n",
    "# Add Loan status\n",
    "rej[\"Approved\"] = 0\n",
    "\n",
    "\n",
    "print(len(rej[\"Amount Requested\"]))\n",
    "print(rejected[\"Policy Code\"].unique())\n",
    "rej.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1969
    },
    "colab_type": "code",
    "collapsed": false,
    "id": "FphnnVVucOW8",
    "outputId": "21621138-7b08-467a-a219-bc8f183c22b5"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['1' nan]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Amount Requested</th>\n",
       "      <th>Debt-To-Income Ratio</th>\n",
       "      <th>State</th>\n",
       "      <th>Employment Length</th>\n",
       "      <th>Approved</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5000</td>\n",
       "      <td>27.65</td>\n",
       "      <td>AZ</td>\n",
       "      <td>10+ years</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2500</td>\n",
       "      <td>1</td>\n",
       "      <td>GA</td>\n",
       "      <td>&lt; 1 year</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2400</td>\n",
       "      <td>8.72</td>\n",
       "      <td>IL</td>\n",
       "      <td>10+ years</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10000</td>\n",
       "      <td>20</td>\n",
       "      <td>CA</td>\n",
       "      <td>10+ years</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3000</td>\n",
       "      <td>17.94</td>\n",
       "      <td>OR</td>\n",
       "      <td>1 year</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "0 Amount Requested Debt-To-Income Ratio State Employment Length  Approved\n",
       "1             5000                27.65    AZ         10+ years         1\n",
       "2             2500                    1    GA          < 1 year         1\n",
       "3             2400                 8.72    IL         10+ years         1\n",
       "4            10000                   20    CA         10+ years         1\n",
       "5             3000                17.94    OR            1 year         1"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Import the dataset for approved loans\n",
    "approved = pd.read_csv(\"LoanStats3a.csv\", low_memory = False)\n",
    "\n",
    "# This is because we used to have a series \n",
    "# but we need a dataframe with several columns.\n",
    "approved = approved[approved.columns[0]]\n",
    "approved = approved.to_frame().reset_index()\n",
    "\n",
    "# From here we assign the proper names of each column\n",
    "approved.columns = approved.iloc[0] #set the header row as the df header\n",
    "approved = approved[1:] #take the data less the header row\n",
    "\n",
    "# Keep only variables we can also use in rejected and are important\n",
    "appr = approved[[\"loan_amnt\",\"dti\",\"addr_state\",\"emp_length\"]]\n",
    "\n",
    "# Drop na values\n",
    "appr = appr.dropna()\n",
    "\n",
    "# Add Loan status\n",
    "appr[\"Approved\"] = 1\n",
    "\n",
    "# Give both dataframes the same column names\n",
    "appr.columns = rej.columns\n",
    "#appr.head()\n",
    "#appr = appr.iloc[:-2]\n",
    "print(approved[\"policy_code\"].unique())\n",
    "appr.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 204
    },
    "colab_type": "code",
    "collapsed": false,
    "id": "OEpBZQqCoWAt",
    "outputId": "464c7fe8-64a1-4347-9561-260a40b18d5b"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Amount Requested</th>\n",
       "      <th>Debt-To-Income Ratio</th>\n",
       "      <th>State</th>\n",
       "      <th>Employment Length</th>\n",
       "      <th>Approved</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17000.00</td>\n",
       "      <td>35.53</td>\n",
       "      <td>LA</td>\n",
       "      <td>&lt; 1 year</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6300.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>AK</td>\n",
       "      <td>&lt; 1 year</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8000.00</td>\n",
       "      <td>50.23</td>\n",
       "      <td>OR</td>\n",
       "      <td>&lt; 1 year</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5800.00</td>\n",
       "      <td>30.40</td>\n",
       "      <td>KY</td>\n",
       "      <td>2 years</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2500.00</td>\n",
       "      <td>23.58</td>\n",
       "      <td>SC</td>\n",
       "      <td>&lt; 1 year</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "0 Amount Requested  Debt-To-Income Ratio State Employment Length  Approved\n",
       "0         17000.00                 35.53    LA          < 1 year         0\n",
       "1          6300.00                  4.00    AK          < 1 year         0\n",
       "2          8000.00                 50.23    OR          < 1 year         0\n",
       "3          5800.00                 30.40    KY           2 years         0\n",
       "4          2500.00                 23.58    SC          < 1 year         0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now we put them together like this\n",
    "df = pd.concat([rej,appr])\n",
    "\n",
    "df.replace(float(\"nan\"),float(\"NaN\"))\n",
    "\n",
    "# Drop the rows that miss a value\n",
    "df.dropna()\n",
    "\n",
    "# Make Debt-To-Income Ratio just floats\n",
    "df[\"Debt-To-Income Ratio\"] = df[\"Debt-To-Income Ratio\"].replace(\"%\",\"\",regex=True).astype(float)\n",
    "\n",
    "# And shuffle\n",
    "df = df.sample(frac=1).reset_index(drop=True)\n",
    "df.dropna(how=\"any\")\n",
    "\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 153
    },
    "colab_type": "code",
    "collapsed": false,
    "id": "gfvAG13EfOPR",
    "outputId": "e78bb0d0-e8aa-424d-d154-566275dc95f4"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0\n",
       "Amount Requested        788763\n",
       "Debt-To-Income Ratio    788763\n",
       "State                   788763\n",
       "Employment Length       788763\n",
       "Approved                788763\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We make sure every row has complete information.\n",
    "df.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 204
    },
    "colab_type": "code",
    "collapsed": false,
    "id": "8rTcAmZht_rL",
    "outputId": "f2b49ba8-c165-48f7-b0b6-4621242dcd8f"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Amount Requested</th>\n",
       "      <th>Debt-To-Income Ratio</th>\n",
       "      <th>State</th>\n",
       "      <th>Employment Length</th>\n",
       "      <th>Approved</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17000.00</td>\n",
       "      <td>35.53</td>\n",
       "      <td>LA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6300.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>AK</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8000.00</td>\n",
       "      <td>50.23</td>\n",
       "      <td>OR</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5800.00</td>\n",
       "      <td>30.40</td>\n",
       "      <td>KY</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2500.00</td>\n",
       "      <td>23.58</td>\n",
       "      <td>SC</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "0 Amount Requested  Debt-To-Income Ratio State  Employment Length  Approved\n",
       "0         17000.00                 35.53    LA                  0         0\n",
       "1          6300.00                  4.00    AK                  0         0\n",
       "2          8000.00                 50.23    OR                  0         0\n",
       "3          5800.00                 30.40    KY                  2         0\n",
       "4          2500.00                 23.58    SC                  0         0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mapper = {\"< 1 year\":0,\"1 year\":1,\"2 years\":2,\"3 years\":3,\n",
    "          \"4 years\":4,\"5 years\":5,\"6 years\":6,\"7 years\":7,\n",
    "          \"8 years\":8,\"9 years\":9,\"10 years\":10,\"10+ years\":11}\n",
    "df.replace(mapper, inplace=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1235
    },
    "colab_type": "code",
    "collapsed": false,
    "id": "9lvDnpmSexg2",
    "outputId": "df8a50d0-cce1-4eae-e06f-258b5e839a22"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Amount Requested</th>\n",
       "      <th>Debt-To-Income Ratio</th>\n",
       "      <th>Employment Length</th>\n",
       "      <th>Approved</th>\n",
       "      <th>AK</th>\n",
       "      <th>AL</th>\n",
       "      <th>AR</th>\n",
       "      <th>AZ</th>\n",
       "      <th>CA</th>\n",
       "      <th>CO</th>\n",
       "      <th>...</th>\n",
       "      <th>SD</th>\n",
       "      <th>TN</th>\n",
       "      <th>TX</th>\n",
       "      <th>UT</th>\n",
       "      <th>VA</th>\n",
       "      <th>VT</th>\n",
       "      <th>WA</th>\n",
       "      <th>WI</th>\n",
       "      <th>WV</th>\n",
       "      <th>WY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17000.00</td>\n",
       "      <td>35.53</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6300.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8000.00</td>\n",
       "      <td>50.23</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5800.00</td>\n",
       "      <td>30.40</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2500.00</td>\n",
       "      <td>23.58</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 55 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  Amount Requested  Debt-To-Income Ratio  Employment Length  Approved  AK  AL  \\\n",
       "0         17000.00                 35.53                  0         0   0   0   \n",
       "1          6300.00                  4.00                  0         0   1   0   \n",
       "2          8000.00                 50.23                  0         0   0   0   \n",
       "3          5800.00                 30.40                  2         0   0   0   \n",
       "4          2500.00                 23.58                  0         0   0   0   \n",
       "\n",
       "   AR  AZ  CA  CO ...  SD  TN  TX  UT  VA  VT  WA  WI  WV  WY  \n",
       "0   0   0   0   0 ...   0   0   0   0   0   0   0   0   0   0  \n",
       "1   0   0   0   0 ...   0   0   0   0   0   0   0   0   0   0  \n",
       "2   0   0   0   0 ...   0   0   0   0   0   0   0   0   0   0  \n",
       "3   0   0   0   0 ...   0   0   0   0   0   0   0   0   0   0  \n",
       "4   0   0   0   0 ...   0   0   0   0   0   0   0   0   0   0  \n",
       "\n",
       "[5 rows x 55 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now we get dummy variables for each state.\n",
    "df = pd.concat([df,pd.get_dummies(df[\"State\"])], axis = 1)\n",
    "df = df.drop(columns = [\"State\"])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 119
    },
    "colab_type": "code",
    "collapsed": false,
    "id": "NJ5pGu4GJcT_",
    "outputId": "26ad877c-f8cb-41e6-aa35-6b5020329c07"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0\n",
       "1    0\n",
       "2    0\n",
       "3    0\n",
       "4    0\n",
       "Name: Approved, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = df[\"Approved\"]\n",
    "results.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 233
    },
    "colab_type": "code",
    "collapsed": false,
    "id": "qMUOqRmKJcZk",
    "outputId": "5c96e82c-e096-45e9-ef8e-98aee8e0fa0b"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Amount Requested</th>\n",
       "      <th>Debt-To-Income Ratio</th>\n",
       "      <th>Employment Length</th>\n",
       "      <th>AK</th>\n",
       "      <th>AL</th>\n",
       "      <th>AR</th>\n",
       "      <th>AZ</th>\n",
       "      <th>CA</th>\n",
       "      <th>CO</th>\n",
       "      <th>CT</th>\n",
       "      <th>...</th>\n",
       "      <th>SD</th>\n",
       "      <th>TN</th>\n",
       "      <th>TX</th>\n",
       "      <th>UT</th>\n",
       "      <th>VA</th>\n",
       "      <th>VT</th>\n",
       "      <th>WA</th>\n",
       "      <th>WI</th>\n",
       "      <th>WV</th>\n",
       "      <th>WY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17000.00</td>\n",
       "      <td>35.53</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6300.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8000.00</td>\n",
       "      <td>50.23</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5800.00</td>\n",
       "      <td>30.40</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2500.00</td>\n",
       "      <td>23.58</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 54 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  Amount Requested  Debt-To-Income Ratio  Employment Length  AK  AL  AR  AZ  \\\n",
       "0         17000.00                 35.53                  0   0   0   0   0   \n",
       "1          6300.00                  4.00                  0   1   0   0   0   \n",
       "2          8000.00                 50.23                  0   0   0   0   0   \n",
       "3          5800.00                 30.40                  2   0   0   0   0   \n",
       "4          2500.00                 23.58                  0   0   0   0   0   \n",
       "\n",
       "   CA  CO  CT ...  SD  TN  TX  UT  VA  VT  WA  WI  WV  WY  \n",
       "0   0   0   0 ...   0   0   0   0   0   0   0   0   0   0  \n",
       "1   0   0   0 ...   0   0   0   0   0   0   0   0   0   0  \n",
       "2   0   0   0 ...   0   0   0   0   0   0   0   0   0   0  \n",
       "3   0   0   0 ...   0   0   0   0   0   0   0   0   0   0  \n",
       "4   0   0   0 ...   0   0   0   0   0   0   0   0   0   0  \n",
       "\n",
       "[5 rows x 54 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "variables = df.drop(columns=[\"Approved\"])\n",
    "variables.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "collapsed": false,
    "id": "byaHGw6EHOw2",
    "outputId": "590a7456-ad14-4780-ff88-b972a7f7f00e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(788763,)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "collapsed": true,
    "id": "z5MV86mtJcfM"
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train,x_test,y_train,y_test = train_test_split(variables,results,test_size=0.20, shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "collapsed": false,
    "id": "RYvnrrUeIaYX",
    "outputId": "ed8c4dbf-8236-424d-cb45-d0cd589c6b8f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "33159"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(np.where(y_train==1)[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 71
    },
    "colab_type": "code",
    "collapsed": false,
    "id": "_-dHKYLmxtor",
    "outputId": "9c7a67b9-79af-4d68-ee24-ef24d85fa8d8"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight='balanced', dual=False,\n",
       "          fit_intercept=True, intercept_scaling=1, max_iter=100,\n",
       "          multi_class='ovr', n_jobs=1, penalty='l2', random_state=None,\n",
       "          solver='liblinear', tol=0.0001, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn import metrics\n",
    "logreg = LogisticRegression(class_weight = \"balanced\",solver = \"liblinear\",\n",
    "                           penalty=\"l2\")\n",
    "logreg.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 164
    },
    "colab_type": "code",
    "collapsed": false,
    "id": "KDyM94_YJcl_",
    "outputId": "fe89ebd4-a775-44a8-aff0-b3f79f488560"
   },
   "outputs": [],
   "source": [
    "predictions = logreg.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 170
    },
    "colab_type": "code",
    "collapsed": false,
    "id": "gyk-GwV5prHw",
    "outputId": "3d03d0d1-1c6c-4ca1-e3d9-20455b2b46e1"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.82      0.98      0.90    125646\n",
      "          1       0.70      0.18      0.29     32107\n",
      "\n",
      "avg / total       0.80      0.82      0.77    157753\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(metrics.classification_report(predictions,y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 164
    },
    "colab_type": "code",
    "collapsed": false,
    "id": "cCrQQ9moprmC",
    "outputId": "5c3bf9c6-a6c6-4265-f22f-c8f4b2377311"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8173410331340767\n"
     ]
    }
   ],
   "source": [
    "print(metrics.accuracy_score(predictions,y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8264\n",
      "149489\n"
     ]
    }
   ],
   "source": [
    "print(len(np.where(y_test==1)[0]))\n",
    "print(len(np.where(y_test==0)[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "collapsed": true,
    "id": "m3ay7asR0JFS"
   },
   "outputs": [],
   "source": [
    "min_request = df[\"Amount Requested\"].min()\n",
    "\n",
    "def getmax(applicant, predictor = logreg):\n",
    "    \"\"\"\n",
    "    Predict maximum loan that will get approved given the data provided.\n",
    "    Input:\n",
    "        applicant(pandas row): Dataframe with 1 row and 54 columns.\n",
    "                               Contains all variables except \n",
    "                               \"Amount Requested\".\n",
    "    Output:\n",
    "        loan(integer): Maximum loan that will get approved.\n",
    "    \"\"\"\n",
    "    start = pd.DataFrame(data = {\"Amount Requested\":[min_request]})\n",
    "    applicant = pd.concat([applicant,start], axis=1)\n",
    "    loan = \"Not eligible for loans.\"\n",
    "    appr = predictor.predict(applicant)\n",
    "    counter = 0\n",
    "    # This makes loans go as high as 51000\n",
    "    while appr == 1 and counter<10000:\n",
    "        loan = applicant.at[0,\"Amount Requested\"]\n",
    "        applicant.at[0,\"Amount Requested\"] += 5\n",
    "        appr = predictor.predict(applicant)\n",
    "        counter += 1\n",
    "    return loan"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "zRbGa-7-Qw5_"
   },
   "source": [
    "Logistic Regression because we are trying to predict a boolean state. That is, whether or not our loan was approved."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Lsj1IhPkrdgm"
   },
   "source": [
    "### Resources\n",
    "\n",
    "https://stackoverflow.com/questions/31328861/python-pandas-replacing-header-with-top-row/31328974\n",
    "\n",
    "https://stackoverflow.com/questions/26097916/convert-pandas-series-to-dataframe\n",
    "\n",
    "https://stackoverflow.com/questions/29576430/shuffle-dataframe-rows"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "colab": {
   "name": "Copy of Assignment 2 CS156.ipynb",
   "provenance": [],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python [py36]",
   "language": "python",
   "name": "Python [py36]"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
